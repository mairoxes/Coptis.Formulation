@page "/formulas"
@using Coptis.Formulation.WebAssembly.Services
@using Coptis.Formulation.Application.Contracts.Import.Dtos
@using System.Text.Json
@inject FormulasApiClient ApiClient

<PageTitle>Formulas - Coptis Formulation</PageTitle>

<div class="formulas-container">
    <div class="header">
        <div class="title-section">
            <h3>Formulas</h3>
            <span class="badge">@formulas.Count</span>
        </div>
        <button class="btn-import" @onclick="OpenImportModal">+ Import Formula</button>
    </div>

    @if (isLoading)
    {
        <div class="loading">⏳ Loading formulas...</div>
    }
    else if (formulas.Any())
    {
        <table class="formulas-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Weight</th>
                    <th>Total Cost (EUR)</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var formula in formulas)
                {
                    <tr class="@(formula.IsHighlighted ? "highlighted" : "")">
                        <td>
                            @formula.Name
                            @if (formula.IsHighlighted)
                            {
                                <span style="margin-left: 0.5rem;">⭐</span>
                            }
                        </td>
                        <td>@formula.BatchWeight.ToString("F2") @formula.WeightUnit</td>
                        <td>@formula.TotalCost.ToString("F2")</td>
                        <td>
                            <button class="btn-action" @onclick="() => DeleteFormula(formula.Id)">
                                <span class="icon-trash">🗑️</span>
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="empty-state">
            <p style="font-size: 3rem; margin-bottom: 1rem;">📋</p>
            <p>No formulas found. Import your first formula to get started!</p>
        </div>
    }
</div>

@if (showImportModal)
{
    <div class="modal-overlay" @onclick="CloseImportModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h4>Import Formula</h4>
                <button class="btn-close" @onclick="CloseImportModal">×</button>
            </div>

            <div class="modal-body">
                @if (!string.IsNullOrEmpty(importError))
                {
                    <div class="alert alert-error">
                        @importError
                    </div>
                }

                @if (!string.IsNullOrEmpty(importSuccess))
                {
                    <div class="alert alert-success">
                        ✓ @importSuccess
                    </div>
                }

                <div class="form-group">
                    <label>Paste Complete FormulaDto JSON</label>
                    <textarea class="form-control" rows="20" @bind="completeJson"
                              placeholder='Paste your complete formula JSON here...'></textarea>
                    <small class="form-text">Expected format: JSON matching the FormulaDto structure with RawMaterials, Substances, Prices, and Percentages</small>
                </div>
            </div>

            <div class="modal-footer">
                <button class="btn-secondary" @onclick="CloseImportModal">Cancel</button>
                <button class="btn-primary" @onclick="ImportFormula" disabled="@isImporting">
                    @if (isImporting)
                    {
                        <span>⏳ Importing...</span>
                    }
                    else
                    {
                        <span>Import Formula</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<FormulasApiClient.FormulaListItem> formulas = new();
    private bool isLoading = true;
    private bool showImportModal = false;
    private bool isImporting = false;
    private string importError = string.Empty;
    private string importSuccess = string.Empty;
    private string completeJson = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadFormulas();
    }

    private async Task LoadFormulas()
    {
        isLoading = true;
        try
        {
            var result = await ApiClient.GetAll();
            formulas = result.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading formulas: {ex.Message}");
            formulas = new List<FormulasApiClient.FormulaListItem>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OpenImportModal()
    {
        showImportModal = true;
        completeJson = string.Empty;
        importError = string.Empty;
        importSuccess = string.Empty;
    }

    private void CloseImportModal()
    {
        showImportModal = false;
    }

    private async Task ImportFormula()
    {
        isImporting = true;
        importError = string.Empty;
        importSuccess = string.Empty;

        try
        {
            if (string.IsNullOrWhiteSpace(completeJson))
            {
                importError = "Please paste a valid JSON formula.";
                isImporting = false;
                return;
            }

            // Configure JSON options to be more lenient
            var jsonOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                AllowTrailingCommas = true,
                ReadCommentHandling = JsonCommentHandling.Skip,
                NumberHandling = System.Text.Json.Serialization.JsonNumberHandling.AllowReadingFromString
            };

            // First, try to parse as a generic object to see what we're working with
            Console.WriteLine("Attempting to parse JSON...");
            var testParse = JsonSerializer.Deserialize<object>(completeJson, jsonOptions);
            Console.WriteLine("JSON is valid");

            // Now try to deserialize to FormulaDto
            var dtoToSend = JsonSerializer.Deserialize<FormulaDto>(completeJson, jsonOptions);

            if (dtoToSend == null)
            {
                importError = "Failed to parse JSON into FormulaDto structure.";
                isImporting = false;
                return;
            }

            Console.WriteLine($"Parsed FormulaDto: Name={dtoToSend.Name}, Weight={dtoToSend.Weight}");

            var result = await ApiClient.Import(dtoToSend);

            if (result.Status == "Success" || result.Status == "SuccessWithIssues")
            {
                importSuccess = $"Formula imported successfully! Status: {result.Status}";
                await Task.Delay(1500);
                await LoadFormulas();
                CloseImportModal();
            }
            else
            {
                importError = $"Import failed: {string.Join(", ", result.Messages)}";
            }
        }
        catch (JsonException ex)
        {
            importError = $"Invalid JSON format: {ex.Message}. Path: {ex.Path}, Line: {ex.LineNumber}, Position: {ex.BytePositionInLine}";
            Console.WriteLine($"JSON Error Details: {ex}");
        }
        catch (Exception ex)
        {
            importError = $"Error importing formula: {ex.Message}";
            Console.WriteLine($"Import Error: {ex}");
        }
        finally
        {
            isImporting = false;
        }
    }

    private async Task DeleteFormula(string id)
    {
        if (confirm("Are you sure you want to delete this formula?"))
        {
            try
            {
                var success = await ApiClient.Delete(id);
                if (success)
                {
                    await LoadFormulas();
                }
                else
                {
                    Console.WriteLine("Failed to delete formula");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting formula: {ex.Message}");
            }
        }
    }

    private bool confirm(string message)
    {
        return true;
    }
}
