@page "/formulas"
@using Coptis.Formulation.Application.Models
@using Coptis.Formulation.Application.Contracts.Import.Dtos
@using System.Text.Json
@using System.Text
@inject HttpClient Http

<div class="formulas-container">
    <div class="header">
        <div class="title-section">
            <h3>Formulas</h3>
            <span class="badge">@formulas.Count</span>
        </div>
        <button class="btn-import" @onclick="OpenImportModal">Import Formula</button>
    </div>

    @if (isLoading)
    {
        <div class="loading">Loading...</div>
    }
    else if (formulas.Any())
    {
        <table class="formulas-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Weight</th>
                    <th>Total Cost (EUR)</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var formula in formulas)
                {
                    <tr>
                        <td>@formula.Name</td>
                        <td>@formula.BatchWeight g</td>
                        <td>@formula.TotalCost.ToString("F2")</td>
                        <td>
                            <button class="btn-action" @onclick="() => DeleteFormula(formula.Id)">
                                <span class="icon-trash">🗑️</span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="empty-state">No formulas found</div>
    }
</div>

@if (showImportModal)
{
    <div class="modal-overlay" @onclick="CloseImportModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h4>Import Formula</h4>
                <button class="btn-close" @onclick="CloseImportModal">×</button>
            </div>

            <div class="modal-body">
                @if (!string.IsNullOrEmpty(importError))
                {
                    <div class="alert alert-error">
                        @importError
                    </div>
                }

                @if (!string.IsNullOrEmpty(importSuccess))
                {
                    <div class="alert alert-success">
                        @importSuccess
                    </div>
                }

                <div class="form-group">
                    <label>Formula Name</label>
                    <input type="text" class="form-control" @bind="formulaDto.Name" placeholder="Enter formula name" />
                </div>

                <div class="form-group">
                    <label>Weight (g)</label>
                    <input type="number" step="0.01" class="form-control" @bind="formulaDto.Weight" placeholder="Enter weight" />
                </div>

                <div class="form-group">
                    <label>Raw Materials (JSON Array)</label>
                    <textarea class="form-control" rows="10" @bind="rawMaterialsJson" placeholder='[{"name": "Material1", "percentage": 50.5}, {"name": "Material2", "percentage": 49.5}]'></textarea>
                    <small class="form-text">Enter raw materials as JSON array with "name" and "percentage" properties</small>
                </div>

                <div class="form-group">
                    <label>Or paste complete FormulaDto JSON</label>
                    <textarea class="form-control" rows="15" @bind="completeJson" placeholder='{"name": "Formula1", "weight": 500, "rawMaterials": [...]}'></textarea>
                    <small class="form-text">Paste complete JSON here to override all fields above</small>
                </div>
            </div>

            <div class="modal-footer">
                <button class="btn-secondary" @onclick="CloseImportModal">Cancel</button>
                <button class="btn-primary" @onclick="ImportFormula" disabled="@isImporting">
                    @if (isImporting)
                    {
                        <span>Importing...</span>
                    }
                    else
                    {
                        <span>Import</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<FormulaListItem> formulas = new();
    private bool isLoading = true;
    private bool showImportModal = false;
    private bool isImporting = false;
    private string importError = string.Empty;
    private string importSuccess = string.Empty;

    private FormulaDto formulaDto = new();
    private string rawMaterialsJson = string.Empty;
    private string completeJson = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadFormulas();
    }

    private async Task LoadFormulas()
    {
        isLoading = true;
        try
        {
            var result = await Http.GetFromJsonAsync<List<FormulaListItem>>("api/Formulas");
            formulas = result ?? new List<FormulaListItem>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading formulas: {ex.Message}");
            formulas = new List<FormulaListItem>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OpenImportModal()
    {
        showImportModal = true;
        formulaDto = new FormulaDto();
        rawMaterialsJson = string.Empty;
        completeJson = string.Empty;
        importError = string.Empty;
        importSuccess = string.Empty;
    }

    private void CloseImportModal()
    {
        showImportModal = false;
    }

    private async Task ImportFormula()
    {
        isImporting = true;
        importError = string.Empty;
        importSuccess = string.Empty;

        try
        {
            FormulaDto dtoToSend;

            // If complete JSON is provided, use that
            if (!string.IsNullOrWhiteSpace(completeJson))
            {
                dtoToSend = JsonSerializer.Deserialize<FormulaDto>(completeJson, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            else
            {
                dtoToSend = formulaDto;

                if (!string.IsNullOrWhiteSpace(rawMaterialsJson))
                {
                    var rawMaterials = JsonSerializer.Deserialize<List<RawMaterialDto>>(rawMaterialsJson, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                    dtoToSend.RawMaterials = rawMaterials;
                }
            }

            var json = JsonSerializer.Serialize(dtoToSend);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await Http.PostAsync("api/Formulas/import", content);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ImportResult>();
                importSuccess = $"Formula imported successfully! Status: {result.Status}";

                await Task.Delay(1500);
                await LoadFormulas();
                CloseImportModal();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                importError = $"Import failed: {errorContent}";
            }
        }
        catch (JsonException ex)
        {
            importError = $"Invalid JSON format: {ex.Message}";
        }
        catch (Exception ex)
        {
            importError = $"Error importing formula: {ex.Message}";
        }
        finally
        {
            isImporting = false;
        }
    }

    private async Task DeleteFormula(string id)
    {

    }

    public class FormulaDto
    {
        public string Name { get; set; } = string.Empty;
        public decimal Weight { get; set; }
        public List<RawMaterialDto> RawMaterials { get; set; } = new();
    }

    public class RawMaterialDto
    {
        public string Name { get; set; } = string.Empty;
        public decimal Percentage { get; set; }
    }

    public class ImportResult
    {
        public string Status { get; set; }
        public List<string> Messages { get; set; } = new();
    }
}

<style>
    .formulas-container {
        padding: 2rem;
        max-width: 1200px;
        margin: 0 auto;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .title-section {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

        .title-section h3 {
            margin: 0;
            font-size: 1.5rem;
            font-weight: 600;
            color: #1f2937;
        }

    .badge {
        background-color: #3b82f6;
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .btn-import {
        background-color: #16a34a;
        color: white;
        padding: 0.625rem 1.25rem;
        border: none;
        border-radius: 0.375rem;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .btn-import:hover {
            background-color: #15803d;
        }

    .formulas-table {
        width: 100%;
        border-collapse: collapse;
        background-color: white;
        border-radius: 0.5rem;
        overflow: hidden;
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
    }

        .formulas-table thead {
            background-color: #f9fafb;
        }

        .formulas-table th {
            text-align: left;
            padding: 0.75rem 1rem;
            font-weight: 600;
            font-size: 0.875rem;
            color: #6b7280;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .formulas-table td {
            padding: 1rem;
            border-top: 1px solid #e5e7eb;
            color: #1f2937;
        }

        .formulas-table tbody tr:hover {
            background-color: #f9fafb;
        }

    .btn-action {
        background-color: #f3f4f6;
        border: 1px solid #d1d5db;
        padding: 0.5rem;
        border-radius: 0.375rem;
        cursor: pointer;
        transition: all 0.2s;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

        .btn-action:hover {
            background-color: #e5e7eb;
            border-color: #9ca3af;
        }

    .icon-trash {
        font-size: 1rem;
    }

    .loading {
        text-align: center;
        padding: 3rem;
        color: #6b7280;
    }

    .empty-state {
        text-align: center;
        padding: 3rem;
        color: #6b7280;
        background-color: #f9fafb;
        border-radius: 0.5rem;
    }

    /* Modal Styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: white;
        border-radius: 0.5rem;
        width: 90%;
        max-width: 600px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem;
        border-bottom: 1px solid #e5e7eb;
    }

        .modal-header h4 {
            margin: 0;
            font-size: 1.25rem;
            font-weight: 600;
            color: #1f2937;
        }

    .btn-close {
        background: none;
        border: none;
        font-size: 2rem;
        color: #6b7280;
        cursor: pointer;
        line-height: 1;
        padding: 0;
        width: 2rem;
        height: 2rem;
    }

        .btn-close:hover {
            color: #1f2937;
        }

    .modal-body {
        padding: 1.5rem;
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: 0.75rem;
        padding: 1.5rem;
        border-top: 1px solid #e5e7eb;
    }

    .form-group {
        margin-bottom: 1.25rem;
    }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #374151;
            font-size: 0.875rem;
        }

    .form-control {
        width: 100%;
        padding: 0.625rem;
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        transition: border-color 0.2s;
    }

        .form-control:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

    .form-text {
        display: block;
        margin-top: 0.25rem;
        font-size: 0.75rem;
        color: #6b7280;
    }

    .btn-primary {
        background-color: #3b82f6;
        color: white;
        padding: 0.625rem 1.25rem;
        border: none;
        border-radius: 0.375rem;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .btn-primary:hover:not(:disabled) {
            background-color: #2563eb;
        }

        .btn-primary:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    .btn-secondary {
        background-color: #f3f4f6;
        color: #374151;
        padding: 0.625rem 1.25rem;
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .btn-secondary:hover {
            background-color: #e5e7eb;
        }

    .alert {
        padding: 0.75rem 1rem;
        border-radius: 0.375rem;
        margin-bottom: 1rem;
        font-size: 0.875rem;
    }

    .alert-error {
        background-color: #fee2e2;
        color: #991b1b;
        border: 1px solid #fecaca;
    }

    .alert-success {
        background-color: #d1fae5;
        color: #065f46;
        border: 1px solid #a7f3d0;
    }
</style>